import asyncio
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from dotenv import load_dotenv
import os

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AttendanceStates(StatesGroup):
    waiting_for_date_choice = State()
    waiting_for_custom_date = State()
    waiting_for_lesson = State()
    marking_attendance = State()

class AddStudentStates(StatesGroup):
    waiting_for_name = State()

class RemoveStudentStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_full_name = State()

class EditMarkStates(StatesGroup):
    waiting_for_date_choice = State()
    waiting_for_custom_date = State()
    waiting_for_lesson = State()
    waiting_for_student = State()
    waiting_for_status = State()

class ListMarkStates(StatesGroup):
    waiting_for_date_choice = State()
    waiting_for_custom_date = State()
    waiting_for_lesson = State()

class SetHeadmanStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_full_name = State()

class SetGroupStates(StatesGroup):
    waiting_for_group_name = State()

class StatsStates(StatesGroup):
    waiting_for_choice = State()
    waiting_for_surname = State()

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS students (
                 id INTEGER PRIMARY KEY, 
                 name TEXT UNIQUE COLLATE NOCASE,
                 is_headman INTEGER DEFAULT 0)''')
    c.execute('''CREATE TABLE IF NOT EXISTS attendance (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 student_id INTEGER,
                 date TEXT,
                 lesson INTEGER,
                 status TEXT,
                 FOREIGN KEY(student_id) REFERENCES students(id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS group_info (
                 id INTEGER PRIMARY KEY CHECK (id = 1),
                 group_name TEXT)''')
    c.execute("INSERT OR IGNORE INTO group_info (id, group_name) VALUES (1, '–ù–µ —É–∫–∞–∑–∞–Ω–∞')")
    conn.commit()
    conn.close()

# –≤—ã–∑–æ–≤ init_db() –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã. "
        "–£–ø—Ä–∞–≤–ª—è–π –¥–∞–Ω–Ω—ã–º–∏ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ!"
    )

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
@dp.message(Command("add_student"))
async def add_student_start(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    await state.set_state(AddStudentStates.waiting_for_name)

@dp.message(AddStudentStates.waiting_for_name)
async def process_student_name(message: types.Message, state: FSMContext):
    names = message.text.strip().split('\n')
    if not names or all(not name.strip() for name in names):
        await message.reply("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–≤–µ–¥–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–º—è:")
        return
    
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    added = []
    skipped = []
    
    for name in names:
        name = name.strip()
        if name:
            try:
                c.execute("INSERT INTO students (name) VALUES (?)", (name,))
                added.append(name)
            except sqlite3.IntegrityError:
                skipped.append(name)
    
    conn.commit()
    conn.close()
    
    response = ""
    if added:
        response += f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç—ã: {', '.join(added)}\n"
    if skipped:
        response += f"–ü—Ä–æ–ø—É—â–µ–Ω—ã (—É–∂–µ –µ—Å—Ç—å): {', '.join(skipped)}"
    
    await message.reply(response or "–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    await state.clear()

# —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
@dp.message(Command("remove_student"))
async def remove_student_start(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(RemoveStudentStates.waiting_for_name)

@dp.message(RemoveStudentStates.waiting_for_name)
async def process_remove_student(message: types.Message, state: FSMContext):
    surname = message.text.strip()
    if not surname:
        await message.reply("–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑:")
        return

    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("SELECT name FROM students ORDER BY name")
    students = [row[0] for row in c.fetchall()]
    conn.close()

    # —Ñ–∞–º–∏–ª–∏—è –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
    matching_students = [name for name in students if name.upper().startswith(surname.upper())]

    if not matching_students:
        await message.reply("–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:")
        return
    elif len(matching_students) > 1:
        await state.update_data(matching_students=matching_students)
        await message.reply("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π. –£–∫–∞–∂–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û:\n" + "\n".join(matching_students))
        await state.set_state(RemoveStudentStates.waiting_for_full_name)
    else:
        full_name = matching_students[0]
        conn = sqlite3.connect('group_journal.db')
        c = conn.cursor()
        c.execute("DELETE FROM students WHERE name = ?", (full_name,))
        c.execute("DELETE FROM attendance WHERE student_id = (SELECT id FROM students WHERE name = ?)", (full_name,))
        conn.commit()
        conn.close()
        await message.reply(f"–°—Ç—É–¥–µ–Ω—Ç {full_name} —É–¥–∞–ª—ë–Ω.")
        await state.clear()

@dp.message(RemoveStudentStates.waiting_for_full_name)
async def process_remove_full_name(message: types.Message, state: FSMContext):
    full_name_input = message.text.strip()
    data = await state.get_data()
    matching_students = data.get("matching_students", [])

    if full_name_input not in matching_students:
        await message.reply("–§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return

    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("DELETE FROM students WHERE name = ?", (full_name_input,))
    c.execute("DELETE FROM attendance WHERE student_id = (SELECT id FROM students WHERE name = ?)", (full_name_input,))
    conn.commit()
    conn.close()

    await message.reply(f"–°—Ç—É–¥–µ–Ω—Ç {full_name_input} —É–¥–∞–ª—ë–Ω.")
    await state.clear()

@dp.message(RemoveStudentStates.waiting_for_full_name)
async def process_remove_full_name(message: types.Message, state: FSMContext):
    full_name_input = message.text.strip()

    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("SELECT id FROM students WHERE name COLLATE NOCASE = ?", (full_name_input,))
    student = c.fetchone()
    
    if not student:
        await message.reply("–û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        conn.close()
        return
    
    student_id = student[0]
    c.execute("DELETE FROM students WHERE id = ?", (student_id,))
    c.execute("DELETE FROM attendance WHERE student_id = ?", (student_id,))
    conn.commit()
    conn.close()
    
    await message.reply(f"–°—Ç—É–¥–µ–Ω—Ç {full_name_input} —É–¥–∞–ª—ë–Ω.")
    await state.clear()

# –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
@dp.message(Command("list_students"))
async def list_students(message: types.Message):
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("SELECT group_name FROM group_info WHERE id = 1")
    group_name = c.fetchone()[0]
    c.execute("SELECT name, is_headman FROM students ORDER BY name")
    students = c.fetchall()
    conn.close()
    if students:
        student_list = [f"{i+1}. {name}{' (üìã)' if is_headman else ''}" 
                        for i, (name, is_headman) in enumerate(students)]
        student_list_text = "\n".join(student_list)
        await message.reply(f"–ì—Ä—É–ø–ø–∞: {group_name}\n–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n{student_list_text}")
    else:
        await message.reply(f"–ì—Ä—É–ø–ø–∞: {group_name}\n–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")

# –æ—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
@dp.message(Command("mark"))
async def mark_attendance(message: types.Message, state: FSMContext):
    current_date = datetime.now().strftime("%d.%m.%Y")
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"–°–µ–≥–æ–¥–Ω—è ({current_date})")],
            [KeyboardButton(text="–î—Ä—É–≥–∞—è –¥–∞—Ç–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.reply("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:", reply_markup=markup)
    await state.set_state(AttendanceStates.waiting_for_date_choice)

def get_lesson_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1‚É£"), KeyboardButton(text="2‚É£")],
            [KeyboardButton(text="3‚É£"), KeyboardButton(text="4‚É£")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

@dp.message(AttendanceStates.waiting_for_date_choice)
async def process_date_choice(message: types.Message, state: FSMContext):
    if message.text.startswith("–°–µ–≥–æ–¥–Ω—è"):
        current_date = datetime.now().strftime("%d.%m.%Y")
        await state.update_data(date=current_date)
        await message.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", reply_markup=get_lesson_keyboard())
        await state.set_state(AttendanceStates.waiting_for_lesson)
    elif message.text == "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞":
        await message.reply("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å.–º–µ—Å—è—Ü' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23.03):", reply_markup=ReplyKeyboardRemove())
        await state.set_state(AttendanceStates.waiting_for_custom_date)
    else:
        await message.reply("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫!")

@dp.message(AttendanceStates.waiting_for_custom_date)
async def process_custom_date(message: types.Message, state: FSMContext):
    try:
        day, month = map(int, message.text.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12):
            raise ValueError
        current_year = datetime.now().year
        date = f"{day:02d}.{month:02d}.{current_year}"
        await state.update_data(date=date)
        await message.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", reply_markup=get_lesson_keyboard())
        await state.set_state(AttendanceStates.waiting_for_lesson)
    except (ValueError, IndexError):
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É –∫–∞–∫ '–¥–µ–Ω—å.–º–µ—Å—è—Ü' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23.03):")

@dp.message(AttendanceStates.waiting_for_lesson)
async def process_lesson(message: types.Message, state: FSMContext):
    lesson_map = {"1‚É£": 1, "2‚É£": 2, "3‚É£": 3, "4‚É£": 4}
    if message.text not in lesson_map:
        await message.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫!")
        return
        
    lesson = lesson_map[message.text]
    await state.update_data(lesson=lesson)
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    
    c.execute("SELECT id, name, is_headman FROM students ORDER BY name")
    all_students = c.fetchall()
    conn.close()
    
    if not all_students:
        await message.reply("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ /add_student.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return
    
    # –æ—Ç–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ—Å—Ç—ã –Ω–∞ –ø–µ—Ä–µ–∫–ª–∏—á–∫–µ
    headman = None
    students = []
    for student in all_students:
        if student[2]:  # is_headman = 1
            headman = student
        else:
            students.append(student)
    
    data = await state.get_data()
    date = data['date']
    
    # —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ä–æ—Å—Ç–∞ --> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –ø–µ—Ä–µ–∫–ª–∏—á–∫–µ (–ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    if headman:
        conn = sqlite3.connect('group_journal.db')
        c = conn.cursor()
        c.execute("SELECT id FROM attendance WHERE student_id = ? AND date = ? AND lesson = ?",
                  (headman[0], date, lesson))
        attendance_record = c.fetchone()
        
        if attendance_record:
            c.execute("UPDATE attendance SET status = ? WHERE id = ?",
                      ("–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", attendance_record[0]))
        else:
            c.execute("INSERT INTO attendance (student_id, date, lesson, status) VALUES (?, ?, ?, ?)",
                      (headman[0], date, lesson, "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª"))
        conn.commit()
        conn.close()
    
    # –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏
    if students:
        await state.update_data(students=students, current_student_idx=0)
        student = students[0]
        markup = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ"), KeyboardButton(text="‚ùå")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.reply(f"–û—Ç–º–µ—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –¥–ª—è {student[1]}:", reply_markup=markup)
        await state.set_state(AttendanceStates.marking_attendance)
    else:
        await message.reply("–í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ)!", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    
@dp.message(AttendanceStates.marking_attendance)
async def process_mark_attendance(message: types.Message, state: FSMContext):
    status = message.text
    if status not in ["‚úÖ", "‚ùå"]:
        await message.reply("–í—ã–±–µ—Ä–∏ '‚úÖ' –∏–ª–∏ '‚ùå' —Å –∫–Ω–æ–ø–æ–∫.")
        return
    
    status_text = "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª" if status == "‚úÖ" else "–æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª"
    data = await state.get_data()
    students = data['students']
    current_idx = data['current_student_idx']
    date = data['date']
    lesson = data['lesson']
    
    # –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç students —Å–æ–¥–µ—Ä–∂–∏—Ç (id, name, is_headman)
    student_id, student_name, _ = students[current_idx]  # –∏–≥–Ω–æ—Ä is_headman —á–µ—Ä–µ–∑ _
    
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    c.execute("SELECT id FROM attendance WHERE student_id = ? AND date = ? AND lesson = ?",
              (student_id, date, lesson))
    attendance_record = c.fetchone()
    
    if attendance_record:
        c.execute("UPDATE attendance SET status = ? WHERE id = ?",
                  (status_text, attendance_record[0]))
    else:
        c.execute("INSERT INTO attendance (student_id, date, lesson, status) VALUES (?, ?, ?, ?)",
                  (student_id, date, lesson, status_text))
    conn.commit()
    conn.close()
    
    # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É
    next_idx = current_idx + 1
    if next_idx < len(students):
        await state.update_data(current_student_idx=next_idx)
        next_student = students[next_idx]
        markup = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ"), KeyboardButton(text="‚ùå")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.reply(f"–û—Ç–º–µ—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –¥–ª—è {next_student[1]}:", reply_markup=markup)
    else:
        await message.reply("–í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã!", reply_markup=ReplyKeyboardRemove())
        await state.clear()

# –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ—Ç–∫–∏
@dp.message(Command("edit_mark"))
async def edit_mark_start(message: types.Message, state: FSMContext):
    current_date = datetime.now().strftime("%d.%m.%Y")
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"–°–µ–≥–æ–¥–Ω—è ({current_date})")],
            [KeyboardButton(text="–î—Ä—É–≥–∞—è –¥–∞—Ç–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.reply("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=markup)
    await state.set_state(EditMarkStates.waiting_for_date_choice)

@dp.message(EditMarkStates.waiting_for_date_choice)
async def edit_process_date_choice(message: types.Message, state: FSMContext):
    if message.text.startswith("–°–µ–≥–æ–¥–Ω—è"):
        current_date = datetime.now().strftime("%d.%m.%Y")
        await state.update_data(date=current_date)
        await message.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", reply_markup=get_lesson_keyboard())
        await state.set_state(EditMarkStates.waiting_for_lesson)
    elif message.text == "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞":
        await message.reply("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å.–º–µ—Å—è—Ü' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23.03):", reply_markup=ReplyKeyboardRemove())
        await state.set_state(EditMarkStates.waiting_for_custom_date)
    else:
        await message.reply("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫!")

@dp.message(EditMarkStates.waiting_for_custom_date)
async def edit_process_custom_date(message: types.Message, state: FSMContext):
    try:
        day, month = map(int, message.text.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12):
            raise ValueError
        current_year = datetime.now().year
        date = f"{day:02d}.{month:02d}.{current_year}"
        await state.update_data(date=date)
        await message.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", reply_markup=get_lesson_keyboard())
        await state.set_state(EditMarkStates.waiting_for_lesson)
    except (ValueError, IndexError):
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É –∫–∞–∫ '–¥–µ–Ω—å.–º–µ—Å—è—Ü' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23.03):")

@dp.message(EditMarkStates.waiting_for_lesson)
async def edit_process_lesson(message: types.Message, state: FSMContext):
    lesson_map = {"1‚É£": 1, "2‚É£": 2, "3‚É£": 3, "4‚É£": 4}
    if message.text not in lesson_map:
        await message.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫!")
        return
        
    lesson = lesson_map[message.text]
    await state.update_data(lesson=lesson)
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("SELECT name FROM students ORDER BY name")
    students = c.fetchall()
    conn.close()
    
    if not students:
        await message.reply("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ /add_student.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return
        
    student_list = [student[0] for student in students]
    await state.update_data(student_list=student_list)
    await message.reply("–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞, —á—å—é –æ—Ç–º–µ—Ç–∫—É –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EditMarkStates.waiting_for_student)

@dp.message(EditMarkStates.waiting_for_student)
async def edit_process_student(message: types.Message, state: FSMContext):
    surname = message.text.strip()
    data = await state.get_data()
    student_list = data.get('student_list')
    
    if not student_list:
        await message.reply("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # —Ñ–∞–º–∏–ª–∏—è –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
    matching_students = [name for name in student_list if name.upper().startswith(surname.upper())]
    if not matching_students:
        await message.reply("–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:")
        return
    elif len(matching_students) > 1:
        await message.reply("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π. –£–∫–∞–∂–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û:\n" + "\n".join(matching_students))
        return
    
    student_name = matching_students[0]
    await state.update_data(student_name=student_name)
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ"), KeyboardButton(text="‚ùå")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.reply(f"–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è {student_name}:", reply_markup=markup)
    await state.set_state(EditMarkStates.waiting_for_status)

@dp.message(EditMarkStates.waiting_for_status)
async def edit_process_status(message: types.Message, state: FSMContext):
    status = message.text
    if status not in ["‚úÖ", "‚ùå"]:
        await message.reply("–í—ã–±–µ—Ä–∏ '‚úÖ' –∏–ª–∏ '‚ùå' —Å –∫–Ω–æ–ø–æ–∫.")
        return
    
    status_text = "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª" if status == "‚úÖ" else "–æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª"
    data = await state.get_data()
    student_name = data.get('student_name')
    date = data.get('date')
    lesson = data.get('lesson')
    
    if not all([student_name, date, lesson]):
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("SELECT id FROM students WHERE UPPER(name) = UPPER(?)", (student_name,))
    student = c.fetchone()
    
    if not student:
        await message.reply("–û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        conn.close()
        await state.clear()
        return
    
    student_id = student[0]
    c.execute("SELECT id FROM attendance WHERE student_id = ? AND date = ? AND lesson = ?",
              (student_id, date, lesson))
    attendance_record = c.fetchone()
    
    if attendance_record:
        c.execute("UPDATE attendance SET status = ? WHERE id = ?",
                  (status_text, attendance_record[0]))
        conn.commit()
        await message.reply(f"–û—Ç–º–µ—Ç–∫–∞ –¥–ª—è {student_name} –Ω–∞ {date}, –ø–∞—Ä–∞ {lesson} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{status}'.",
                            reply_markup=ReplyKeyboardRemove())
    else:
        c.execute("INSERT INTO attendance (student_id, date, lesson, status) VALUES (?, ?, ?, ?)",
                  (student_id, date, lesson, status_text))
        conn.commit()
        await message.reply(f"–û—Ç–º–µ—Ç–∫–∞ –¥–ª—è {student_name} –Ω–∞ {date}, –ø–∞—Ä–∞ {lesson} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ '{status}'.",
                            reply_markup=ReplyKeyboardRemove())
    
    conn.close()
    await state.clear()

# –≤—ã–≤–æ–¥ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
@dp.message(Command("list_mark"))
async def list_mark_start(message: types.Message, state: FSMContext):
    current_date = datetime.now().strftime("%d.%m.%Y")
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"–°–µ–≥–æ–¥–Ω—è ({current_date})")],
            [KeyboardButton(text="–î—Ä—É–≥–∞—è –¥–∞—Ç–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.reply("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:", reply_markup=markup)
    await state.set_state(ListMarkStates.waiting_for_date_choice)

@dp.message(ListMarkStates.waiting_for_date_choice)
async def list_process_date_choice(message: types.Message, state: FSMContext):
    if message.text.startswith("–°–µ–≥–æ–¥–Ω—è"):
        current_date = datetime.now().strftime("%d.%m.%Y")
        await state.update_data(date=current_date)
        await message.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", reply_markup=get_lesson_keyboard())
        await state.set_state(ListMarkStates.waiting_for_lesson)
    elif message.text == "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞":
        await message.reply("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23.03):", reply_markup=ReplyKeyboardRemove())
        await state.set_state(ListMarkStates.waiting_for_custom_date)
    else:
        await message.reply("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫!")

@dp.message(ListMarkStates.waiting_for_custom_date)
async def list_process_custom_date(message: types.Message, state: FSMContext):
    try:
        day, month = map(int, message.text.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12):
            raise ValueError
        current_year = datetime.now().year
        date = f"{day:02d}.{month:02d}.{current_year}"
        await state.update_data(date=date)
        await message.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", reply_markup=get_lesson_keyboard())
        await state.set_state(ListMarkStates.waiting_for_lesson)
    except (ValueError, IndexError):
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É –∫–∞–∫ 23.03 (–¥–µ–Ω—å.–º–µ—Å—è—Ü).")

@dp.message(ListMarkStates.waiting_for_lesson)
async def list_process_lesson(message: types.Message, state: FSMContext):
    lesson_map = {"1‚É£": 1, "2‚É£": 2, "3‚É£": 3, "4‚É£": 4}
    if message.text not in lesson_map:
        await message.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫!")
        return
        
    lesson = lesson_map[message.text]
    data = await state.get_data()
    date = data.get('date')
    
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("""
        SELECT s.name, a.status, s.is_headman 
        FROM students s 
        LEFT JOIN attendance a ON s.id = a.student_id 
        AND a.date = ? AND a.lesson = ? 
        ORDER BY s.name
    """, (date, lesson))
    attendance_data = c.fetchall()
    conn.close()
    
    if not attendance_data:
        await message.reply(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ {date}, –ø–∞—Ä–∞ {lesson}.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return
    
    attendance_list = [
        f"{i+1}. {name}{' (üìã)' if is_headman else ''}: {status if status else '‚ùì'}"
        .replace('–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª', '‚úÖ')
        .replace('–æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª', '‚ùå')
        for i, (name, status, is_headman) in enumerate(attendance_data)
    ]
    response = f"–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ {date}, –ø–∞—Ä–∞ {lesson}:\n" + "\n".join(attendance_list)
    await message.reply(response, reply_markup=ReplyKeyboardRemove())
    await state.clear()

# –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ—Å—Ç—ã
@dp.message(Command("set_headman"))
async def set_headman_start(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π:")
    await state.set_state(SetHeadmanStates.waiting_for_name)

@dp.message(SetHeadmanStates.waiting_for_name)
async def process_set_headman(message: types.Message, state: FSMContext):
    surname = message.text.strip()
    if not surname:
        await message.reply("–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑:")
        return

    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("SELECT name, is_headman FROM students ORDER BY name")
    students = c.fetchall()
    conn.close()

    # —Ñ–∞–º–∏–ª–∏—è –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
    matching_students = [student for student in students if student[0].upper().startswith(surname.upper())]

    if not matching_students:
        await message.reply("–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:")
        return
    elif len(matching_students) > 1:
        await state.update_data(matching_students=matching_students)
        await message.reply("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π. –£–∫–∞–∂–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û:\n" + "\n".join([s[0] for s in matching_students]))
        await state.set_state(SetHeadmanStates.waiting_for_full_name)
    else:
        full_name, is_headman = matching_students[0]
        if is_headman:
            await message.reply(f"{full_name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π!")
            await state.clear()
        else:
            conn = sqlite3.connect('group_journal.db')
            c = conn.cursor()
            c.execute("UPDATE students SET is_headman = 0 WHERE is_headman = 1")
            c.execute("UPDATE students SET is_headman = 1 WHERE name = ?", (full_name,))
            conn.commit()
            conn.close()
            await message.reply(f"{full_name} —Ç–µ–ø–µ—Ä—å —Å—Ç–∞—Ä–æ—Å—Ç–∞! –û–Ω(–∞) –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω(–∞) –≤ —Å–ø–∏—Å–∫–µ.")
            await state.clear()

@dp.message(SetHeadmanStates.waiting_for_full_name)
async def process_set_headman_full_name(message: types.Message, state: FSMContext):
    full_name_input = message.text.strip()
    data = await state.get_data()
    matching_students = data.get("matching_students", [])

    if full_name_input not in matching_students:
        await message.reply("–§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return

    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("UPDATE students SET is_headman = 0 WHERE is_headman = 1")
    c.execute("UPDATE students SET is_headman = 1 WHERE name = ?", (full_name_input,))
    conn.commit()
    conn.close()

    await message.reply(f"{full_name_input} —Ç–µ–ø–µ—Ä—å —Å—Ç–∞—Ä–æ—Å—Ç–∞! –û–Ω(–∞) –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω(–∞) –≤ —Å–ø–∏—Å–∫–µ.")
    await state.clear()

# —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
@dp.message(Command("set_group"))
async def set_group_start(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("SELECT group_name FROM group_info WHERE id = 1")
    current_group_name = c.fetchone()[0]
    conn.close()

    if current_group_name != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
        # –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å")],
                [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.reply(
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {current_group_name}\n"
            "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å?",
            reply_markup=markup
        )
        await state.set_state(SetGroupStates.waiting_for_group_name)
    else:
        # –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
        await message.reply("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã:")
        await state.set_state(SetGroupStates.waiting_for_group_name)

@dp.message(SetGroupStates.waiting_for_group_name)
async def process_group_name(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("SELECT group_name FROM group_info WHERE id = 1")
    current_group_name = c.fetchone()[0]
    conn.close()

    user_input = message.text.strip()

    if current_group_name != '–ù–µ —É–∫–∞–∑–∞–Ω–∞' and user_input in ["–ò–∑–º–µ–Ω–∏—Ç—å", "–û—Å—Ç–∞–≤–∏—Ç—å"]:
        if user_input == "–û—Å—Ç–∞–≤–∏—Ç—å":
            await message.reply(f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Å—Ç–∞—ë—Ç—Å—è: {current_group_name}", reply_markup=ReplyKeyboardRemove())
            await state.clear()
        elif user_input == "–ò–∑–º–µ–Ω–∏—Ç—å":
            await message.reply("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã:", reply_markup=ReplyKeyboardRemove())
        return

    if not user_input:
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑:")
        return
    
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("UPDATE group_info SET group_name = ? WHERE id = 1", (user_input,))
    conn.commit()
    conn.close()
    
    await message.reply(f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {user_input}", reply_markup=ReplyKeyboardRemove())
    await state.clear()

# –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
@dp.message(Command("stats"))
async def show_attendance_stats(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.reply("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=markup)
    await state.set_state(StatsStates.waiting_for_choice)

@dp.message(StatsStates.waiting_for_choice)
async def process_stats_choice(message: types.Message, state: FSMContext):
    if message.text == "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        conn = sqlite3.connect('group_journal.db')
        c = conn.cursor()
        
        # –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        c.execute("SELECT group_name FROM group_info WHERE id = 1")
        group_name = c.fetchone()[0]
        
        # –≤—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã
        c.execute("SELECT id, name, is_headman FROM students ORDER BY name")
        students = c.fetchall()
        
        if not students:
            await message.reply(f"–ì—Ä—É–ø–ø–∞: {group_name}\n–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ /add_student.", reply_markup=ReplyKeyboardRemove())
            conn.close()
            await state.clear()
            return
        
        # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        stats = {}
        for student_id, name, is_headman in students:
            c.execute("SELECT status FROM attendance WHERE student_id = ?", (student_id,))
            records = c.fetchall()
            total_lessons = len(records)
            present = sum(1 for record in records if record[0] == "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª")
            absent = total_lessons - present
            attendance_percent = (present / total_lessons * 100) if total_lessons > 0 else 100
            stats[name] = {
                "absent": absent,
                "total": total_lessons,
                "percent": attendance_percent,
                "is_headman": is_headman
            }
        
        conn.close()
        
        if not any(stats.values()):
            await message.reply(f"–ì—Ä—É–ø–ø–∞: {group_name}\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return
        
        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        response = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã: {group_name}\n\n"
        
        # 1. –∫—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞–ª
        max_absent = max((data["absent"] for data in stats.values()), default=0)
        if max_absent > 0:
            most_absent = [name for name, data in stats.items() if data["absent"] == max_absent]
            response += "–ß–∞—â–µ –≤—Å–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞–ª–∏ –∑–∞–Ω—è—Ç–∏—è:\n"
            for name in most_absent:
                response += f"- {name}{' (üìã)' if stats[name]['is_headman'] else ''}: {max_absent} –ø—Ä–æ–ø—É—Å–∫–æ–≤\n"
        else:
            response += "–ù–∏–∫—Ç–æ –µ—â—ë –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–ª –∑–∞–Ω—è—Ç–∏—è.\n"
        
        # 2. –∫—Ç–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ
        no_absences = [name for name, data in stats.items() if data["absent"] == 0 and data["total"] > 0]
        if no_absences:
            response += "\n–ù–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞:\n"
            for name in no_absences:
                response += f"- {name}{' (üìã)' if stats[name]['is_headman'] else ''}\n"
        else:
            response += "\n–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ (–∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö).\n"
        
        # 3. –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö
        response += "\n–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:\n"
        for name, data in stats.items():
            percent = data["percent"]
            total = data["total"]
            response += f"- {name}{' (üìã)' if data['is_headman'] else ''}: {percent:.1f}% ({total} –∑–∞–Ω—è—Ç–∏–π)\n"
        
        await message.reply(response, reply_markup=ReplyKeyboardRemove())
        await state.clear()

    elif message.text == "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç":
        await message.reply("–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(StatsStates.waiting_for_surname)
    else:
        await message.reply("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫!")

@dp.message(StatsStates.waiting_for_surname)
async def process_stats_surname(message: types.Message, state: FSMContext):
    surname = message.text.strip()
    if not surname:
        await message.reply("–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑:")
        return

    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("SELECT group_name FROM group_info WHERE id = 1")
    group_name = c.fetchone()[0]
    c.execute("SELECT id, name, is_headman FROM students ORDER BY name")
    students = c.fetchall()
    conn.close()

    # —Ñ–∞–º–∏–ª–∏—è –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
    matching_students = [student for student in students if student[1].upper().startswith(surname.upper())]

    if not matching_students:
        await message.reply("–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:")
        return
    elif len(matching_students) > 1:
        await state.update_data(matching_students=[s[1] for s in matching_students])
        await message.reply("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π. –£–∫–∞–∂–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û:\n" + "\n".join([s[1] for s in matching_students]))
        return
    
    student_id, full_name, is_headman = matching_students[0]
    conn = sqlite3.connect('group_journal.db')
    c = conn.cursor()
    c.execute("SELECT status FROM attendance WHERE student_id = ?", (student_id,))
    records = c.fetchall()
    conn.close()

    total_lessons = len(records)
    present = sum(1 for record in records if record[0] == "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª")
    absent = total_lessons - present
    attendance_percent = (present / total_lessons * 100) if total_lessons > 0 else 100

    response = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {full_name}{' (üìã)' if is_headman else ''} (–≥—Ä—É–ø–ø–∞: {group_name}):\n"
    response += f"–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {total_lessons}\n"
    response += f"–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {present}\n"
    response += f"–û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {absent}\n"
    response += f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {attendance_percent:.1f}%"
    
    await message.reply(response)
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())